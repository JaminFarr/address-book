{"version":3,"sources":["stores/address.js","stores/useLocalStorage.js","AddressBook/components/DetailItem.js","AddressBook/Map.js","AddressBook/Display.js","AddressBook/hooks/lookup-postcode.js","AddressBook/Edit/PostcodeLookup.js","AddressBook/hooks/debounce-value.js","AddressBook/Edit/AddressEdit.js","AddressBook/Edit/index.js","AddressBook/Edit/Edit.js","AddressBook/utils/getEmptyAddress.js","AddressBook/hooks/form-state.js","AddressBook/components/ScrollInToView.js","AddressBook/List.js","AddressBook/SearchBox.js","AddressBook/index.js","AddressBook/AddressBook.js","App.js","serviceWorker.js","index.js"],"names":["ACTIONS","addressReducer","state","action","type","payload","concat","Object","toConsumableArray","map","address","email","filter","AddressContext","createContext","AddressProvider","_ref","children","_useReducer","useReducer","_useReducer2","slicedToArray","addresses","dispatch","actions","useMemo","add","update","remove","_useLocalStorage","key","initialValue","_useState","useState","item","window","localStorage","getItem","JSON","parse","error","console","log","_useState2","storedValue","setStoredValue","value","valueToStore","Function","setItem","stringify","useLocalStorage","_useLocalStorage2","localStorageAddresses","setLocalStorageAddresses","useEffect","Axios","get","then","_ref3","data","duplicateEmails","Set","_ref2","isDuplicate","has","storeValue","react_default","a","createElement","Provider","DetailItem","title","className","split","line","i","react","osmTileProvider","x","y","z","s","String","fromCharCode","Map","_ref$location","location","latitude","longitude","lib_default","center","defaultZoom","height","zoomSnap","provider","lib_react_default","anchor","CloseButton","props","objectWithoutProperties","assign","aria-label","aria-hidden","Display","clearSelection","edit","name","tel","address1","address2","town","county","postcode","addressText","Boolean","join","Row_default","Col_default","xs","Display_CloseButton","onClick","DetailItem_DetailItem","AddressBook_Map","Button_default","variant","propsTypes","object","isRequired","func","CancelToken","axios","PostcodeLookup","setPostcode","postcodeSearch","setPostcodeSearch","_useLookupPostCode","result","setResult","_useState3","_useState4","loading","setLoading","length","source","asyncToGenerator","regenerator_default","mark","_callee","response","wrap","_context","prev","next","cancelToken","token","sent","t0","isCancel","abrupt","status","stop","apply","this","arguments","request","cancel","isLoading","isNotFound","hasError","useLookupPostCode","timeout","returnValue","setReturnValue","timerId","setTimeout","clearTimeout","useDebounce","resultAddress","admin_district","primary_care_trust","admin_county","region","parliamentary_constituency","Form_default","Group","controlId","Label","Control","placeholder","onChange","target","Text","disabled","AddressEdit","bindField","clearPostcode","size","Edit","_ref$address","storeAddress","onClose","_useFormState","initState","undefined","formState","setFormState","setField","field","objectSpread","defineProperty","event","targetOrValue","useFormState","editAddress","setEditAddress","show","setShow","isDuplicateEmail","originalEmail","useContext","find","useIsDuplicateEmail","hasPostcode","canSave","Modal_default","onHide","onExited","Header","closeButton","Title","Body","style","minHeight","Badge_default","AddressEdit_AddressEdit","Edit_PostcodeLookup","postcodeDetails","Footer","ScrollInToView","active","scrollElement","createRef","current","scrollIntoViewIfNeeded","ref","List","isSelected","ListGroup_default","maxHeight","overflowY","borderTop","borderBottom","isItemSelected","Item","components_ScrollInToView","SearchBox","InputGroup_default","FormControl_default","Append","index_esm","icon","Search","AddressBook","_useContext","selected","setSelected","search","setSearch","_useState5","_useState6","editingAddress","setEditingAddress","filteredAddresses","slice","sort","b","toLowerCase","includes","md","AddressBook_SearchBox","AddressBook_List","AddressBook_Display","AddressBook_Edit","updateAddress","existingEmail","App","address_AddressProvider","Container_default","src_AddressBook","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7441ff5a.chunk.js","sourcesContent":["import React, { createContext, useEffect, useMemo, useReducer } from \"react\";\r\nimport Axios from \"axios\";\r\nimport { useLocalStorage } from \"./useLocalStorage\";\r\n\r\n/**\r\n * My plan is to mix a react context and useReducer into a redux style store\r\n *\r\n * This module exports two items\r\n *   AddressProvider a component that provides should wrap the app\r\n *   AddressContext a context object to give access to the store\r\n */\r\n\r\nexport const ACTIONS = {\r\n  initStore: \"initStore\",\r\n  addAddress: \"addAddress\",\r\n  updateAddress: \"updateAddress\",\r\n  removeAddress: \"removeAddress\",\r\n};\r\n\r\n/**\r\n * store reducer\r\n */\r\n\r\nconst addressReducer = (state, action) => {\r\n  switch (action.type) {\r\n    // Set-up the store on load\r\n    case ACTIONS.initStore:\r\n      return action.payload;\r\n\r\n    // Appends the new address to the end of the store array\r\n    case ACTIONS.addAddress:\r\n      return [...state, action.payload];\r\n\r\n    // Copies the store array replacing the address with a matching email\r\n    // with the payload address\r\n    // The email is provided separately in case the email has been updated\r\n    case ACTIONS.updateAddress:\r\n      return state.map((address) =>\r\n        address.email === action.payload.email\r\n          ? action.payload.address\r\n          : address\r\n      );\r\n\r\n    // Copies the store array except for the address with the matching email\r\n    case ACTIONS.removeAddress:\r\n      return state.filter((address) => address.email !== action.payload);\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const AddressContext = createContext();\r\n\r\nexport const AddressProvider = ({ children }) => {\r\n  const [addresses, dispatch] = useReducer(addressReducer, []);\r\n\r\n  // Action creators\r\n  //\r\n  // These can be used anywhere the context is imported.\r\n  // useMemo prevents recreating the object and functions on every render.\r\n  const actions = useMemo(\r\n    () => ({\r\n      add(address) {\r\n        dispatch({\r\n          type: ACTIONS.addAddress,\r\n          payload: address,\r\n        });\r\n      },\r\n      update(email, address) {\r\n        dispatch({\r\n          type: ACTIONS.updateAddress,\r\n          payload: { email, address },\r\n        });\r\n      },\r\n      remove(email) {\r\n        dispatch({\r\n          type: ACTIONS.removeAddress,\r\n          payload: email,\r\n        });\r\n      },\r\n    }),\r\n    [dispatch]\r\n  );\r\n\r\n  // Get the addresses from the browsers localstorage\r\n  const [localStorageAddresses, setLocalStorageAddresses] = useLocalStorage(\r\n    \"benf-address-book\",\r\n    \"NO_LOCALSTORE\"\r\n  );\r\n\r\n  // Init store addresses\r\n  useEffect(() => {\r\n    // Populate from localStorageAddresses if it exists\r\n    if (localStorageAddresses !== \"NO_LOCALSTORE\") {\r\n      const duplicateEmails = new Set();\r\n\r\n      dispatch({\r\n        type: ACTIONS.initStore,\r\n        payload: localStorageAddresses.filter(({ email }) => {\r\n          const isDuplicate = duplicateEmails.has(email);\r\n          duplicateEmails.add(email);\r\n          return !isDuplicate;\r\n        }),\r\n      });\r\n      return;\r\n    }\r\n\r\n    // otherwise load and populate from `entries.json`\r\n    Axios.get(\"data/entries.json\").then(({ data }) =>\r\n      dispatch({\r\n        type: ACTIONS.initStore,\r\n        payload: data,\r\n      })\r\n    );\r\n  }, []);\r\n\r\n  // Set the local storage every time the addresses array changes\r\n  useEffect(() => {\r\n    setLocalStorageAddresses(addresses);\r\n  }, [addresses]);\r\n\r\n  // The actual store value\r\n  const storeValue = {\r\n    addresses,\r\n    actions,\r\n  };\r\n\r\n  return (\r\n    <AddressContext.Provider value={storeValue}>\r\n      {children}\r\n    </AddressContext.Provider>\r\n  );\r\n};\r\n","import { useState } from \"react\";\r\n\r\n// Taken from https://usehooks.com/useLocalStorage/\r\n\r\nexport function useLocalStorage(key, initialValue) {\r\n  // State to store our value\r\n  // Pass initial state function to useState so logic is only executed once\r\n  const [storedValue, setStoredValue] = useState(() => {\r\n    try {\r\n      // Get from local storage by key\r\n      const item = window.localStorage.getItem(key);\r\n      // Parse stored json or if none return initialValue\r\n      return item ? JSON.parse(item) : initialValue;\r\n    } catch (error) {\r\n      // If error also return initialValue\r\n      console.log(error);\r\n      return initialValue;\r\n    }\r\n  });\r\n\r\n  // Return a wrapped version of useState's setter function that ...\r\n  // ... persists the new value to localStorage.\r\n  const setValue = value => {\r\n    try {\r\n      // Allow value to be a function so we have same API as useState\r\n      const valueToStore =\r\n        value instanceof Function ? value(storedValue) : value;\r\n      // Save state\r\n      setStoredValue(valueToStore);\r\n      // Save to local storage\r\n      window.localStorage.setItem(key, JSON.stringify(valueToStore));\r\n    } catch (error) {\r\n      // A more advanced implementation would handle the error case\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  return [storedValue, setValue];\r\n}\r\n","import React, { Fragment } from \"react\";\r\n\r\n/**\r\n * Styled title and value for detail lists\r\n *\r\n * string values with new lines are split with <br/>s\r\n *\r\n */\r\nexport const DetailItem = ({ title, value }) => (\r\n  <div className=\"mt-2 mb-4\">\r\n    <p className=\"h3\">{title}:</p>\r\n    <p>\r\n      {typeof value === \"string\" ? (\r\n        value.split(/\\r\\n|\\n|\\r/g).map((line, i) => (\r\n          <Fragment key={i}>\r\n            {line}\r\n            <br />\r\n          </Fragment>\r\n        ))\r\n      ) : (\r\n        <Fragment>\r\n          {value}\r\n          <br />\r\n        </Fragment>\r\n      )}\r\n    </p>\r\n  </div>\r\n);\r\n","import React from \"react\";\r\nimport PigeonMap from \"pigeon-maps\";\r\nimport Marker from \"pigeon-marker\";\r\nimport { shape, number } from \"prop-types\";\r\n\r\n/**\r\n * Map - presenter component\r\n *\r\n */\r\nconst Map = ({ location: { latitude, longitude } }) => (\r\n  <PigeonMap\r\n    center={[latitude, longitude]}\r\n    defaultZoom={10}\r\n    height={320}\r\n    zoomSnap={false}\r\n    provider={osmTileProvider}\r\n  >\r\n    <Marker anchor={[latitude, longitude]} />\r\n  </PigeonMap>\r\n);\r\n\r\nMap.propTypes = {\r\n  location: shape({\r\n    latitude: number.isRequired,\r\n    longitude: number.isRequired,\r\n  }).isRequired,\r\n};\r\n\r\nconst osmTileProvider = (x, y, z) => {\r\n  const s = String.fromCharCode(97 + ((x + y + z) % 3));\r\n  return `https://${s}.tile.openstreetmap.org/${z}/${x}/${y}.png`;\r\n};\r\n\r\nexport default Map;\r\n","import React from \"react\";\r\nimport Button from \"react-bootstrap/Button\";\r\n\r\nimport Col from \"react-bootstrap/Col\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport { func, object } from \"prop-types\";\r\nimport { DetailItem } from \"./components/DetailItem\";\r\nimport Map from \"./Map\";\r\n\r\nconst CloseButton = ({ className, ...props }) => (\r\n  <button\r\n    type=\"button\"\r\n    className={`close ${className}`}\r\n    aria-label=\"Close\"\r\n    {...props}\r\n  >\r\n    <span aria-hidden=\"true\">&times;</span>\r\n  </button>\r\n);\r\n\r\nconst Display = ({ address, clearSelection, remove, edit }) => {\r\n  const {\r\n    name,\r\n    email,\r\n    tel,\r\n    address1,\r\n    address2,\r\n    town,\r\n    county,\r\n    postcode,\r\n    longitude,\r\n    latitude\r\n  } = address;\r\n\r\n  const addressText = [address1, address2, town, county, postcode]\r\n    .filter(Boolean)\r\n    .join(\"\\n\");\r\n\r\n  const location = longitude && latitude && { longitude, latitude };\r\n\r\n  return (\r\n    <div>\r\n      <Row>\r\n        <Col>\r\n          <h1>{name}</h1>\r\n        </Col>\r\n        <Col xs={1} className=\"text-right\">\r\n          <CloseButton onClick={clearSelection} className=\"ml-2\" />\r\n        </Col>\r\n      </Row>\r\n\r\n      <Row>\r\n        <Col>\r\n          <DetailItem title=\"Email\" value={email} />\r\n          <DetailItem title=\"Tel\" value={tel} />\r\n        </Col>\r\n        <Col>\r\n          <DetailItem title=\"Address\" value={addressText} />\r\n        </Col>\r\n      </Row>\r\n\r\n      {location && (\r\n        <div className=\"mb-3\">\r\n          <Map location={location} />\r\n        </div>\r\n      )}\r\n\r\n      <div className=\"text-right\">\r\n        <Button\r\n          variant=\"primary\"\r\n          className=\"mr-2\"\r\n          onClick={() => edit && edit(address)}\r\n        >\r\n          Edit\r\n        </Button>\r\n        <Button variant=\"danger\" onClick={() => remove && remove(address)}>\r\n          Delete\r\n        </Button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nDisplay.propsTypes = {\r\n  address: object.isRequired,\r\n  remove: func,\r\n  edit: func,\r\n  clearSelection: func\r\n};\r\n\r\nexport default Display;\r\n","import { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nconst { CancelToken } = axios;\r\n\r\nexport const useLookupPostCode = postcode => {\r\n  const [result, setResult] = useState(null);\r\n  const [loading, setLoading] = useState(null);\r\n\r\n  useEffect(() => {\r\n    if (!postcode || postcode.length < 6 || postcode.length > 10) {\r\n      setLoading(false);\r\n      setResult(null);\r\n      return;\r\n    }\r\n\r\n    setLoading(true);\r\n    const source = CancelToken.source();\r\n\r\n    const request = async () => {\r\n      try {\r\n        const response = await axios(\r\n          `https://api.postcodes.io/postcodes/${postcode}`,\r\n          {\r\n            cancelToken: source.token\r\n          }\r\n        );\r\n\r\n        setResult(response.data);\r\n        setLoading(false);\r\n      } catch (err) {\r\n        if (axios.isCancel(err)) {\r\n          return;\r\n        }\r\n\r\n        setLoading(false);\r\n\r\n        if (err.response && err.response.status === 404) {\r\n          setResult(\"NOT FOUND\");\r\n        } else {\r\n          setResult(\"ERROR\");\r\n        }\r\n      }\r\n    };\r\n\r\n    request();\r\n\r\n    return () => {\r\n      source.cancel();\r\n    };\r\n  }, [postcode]);\r\n\r\n  return {\r\n    isLoading: loading,\r\n    result: result && result.result,\r\n    isNotFound: result === \"NOT FOUND\",\r\n    hasError: result === \"ERROR\"\r\n  };\r\n};\r\n","import React, { useState } from \"react\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport { DetailItem } from \"../components/DetailItem\";\r\nimport { useDebounce } from \"../hooks/debounce-value\";\r\nimport { useLookupPostCode } from \"../hooks/lookup-postcode\";\r\nimport Button from \"react-bootstrap/Button\";\r\n\r\nconst PostcodeLookup = ({ setPostcode }) => {\r\n  const [postcodeSearch, setPostcodeSearch] = useState(\"\");\r\n\r\n  // use debounce to prevent to many requests while a user is still typing\r\n  const postcodeSearchDebounced = useDebounce(postcodeSearch, 400);\r\n\r\n  // Performs the lookup to postcode.io\r\n  const { result, isLoading, isNotFound, hasError } = useLookupPostCode(\r\n    postcodeSearchDebounced\r\n  );\r\n\r\n  // If there is a lookup response derive address details from it\r\n  const resultAddress = result && {\r\n    town: result.admin_district || result.primary_care_trust,\r\n    county:\r\n      result.admin_county || result.region || result.parliamentary_constituency,\r\n    postcode: result.postcode,\r\n    latitude: result.latitude,\r\n    longitude: result.longitude\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Form.Group controlId=\"postcodeLookup\">\r\n        <Form.Label className=\"h3\">Postcode Search:</Form.Label>\r\n        <Form.Control\r\n          type=\"text\"\r\n          name=\"postcode-search\"\r\n          placeholder=\"Lookup Postcode\"\r\n          value={postcodeSearch}\r\n          onChange={({ target: { value } }) => setPostcodeSearch(value)}\r\n        />\r\n        <Form.Text>\r\n          {isLoading && <span>Loading</span>}\r\n          {isNotFound && (\r\n            <span className=\"text-warning\">Postcode could not be found</span>\r\n          )}\r\n          {hasError && (\r\n            <span className=\"text-warning\">\r\n              There was an error looking up the postcode\r\n            </span>\r\n          )}\r\n          <span className=\"text-white\">!</span>\r\n        </Form.Text>\r\n      </Form.Group>\r\n\r\n      <Row>\r\n        <Col>\r\n          <DetailItem\r\n            title=\"Town\"\r\n            value={resultAddress && resultAddress.town}\r\n          />\r\n        </Col>\r\n        <Col>\r\n          <DetailItem\r\n            title=\"County\"\r\n            value={resultAddress && resultAddress.county}\r\n          />\r\n        </Col>\r\n      </Row>\r\n\r\n      <div className=\"text-right\">\r\n        <Button\r\n          disabled={!resultAddress}\r\n          onClick={() => setPostcode(resultAddress)}\r\n        >\r\n          Set Postcode\r\n        </Button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PostcodeLookup;\r\n","import { useState, useEffect } from \"react\";\r\n\r\n/**\r\n * Debounces the input value\r\n *\r\n * The return value is only updated when the input hasn't changed\r\n * for {timeout}ms.\r\n */\r\nexport const useDebounce = (value, timeout) => {\r\n  const [returnValue, setReturnValue] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const timerId = setTimeout(() => {\r\n      setReturnValue(value);\r\n    }, timeout);\r\n\r\n    return () => clearTimeout(timerId);\r\n  }, [value]);\r\n\r\n  return returnValue;\r\n};\r\n","import React from \"react\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Form from \"react-bootstrap/Form\";\r\n\r\nexport const AddressEdit = ({ bindField, clearPostcode }) => (\r\n  <div>\r\n    <Form.Group controlId=\"addressLine1\">\r\n      <Form.Label className=\"h3\">Address:</Form.Label>\r\n      <Form.Control\r\n        type=\"text\"\r\n        name=\"line1\"\r\n        placeholder=\"Address line 1\"\r\n        {...bindField(\"address1\")}\r\n      />\r\n    </Form.Group>\r\n\r\n    <Form.Group controlId=\"addressLine2\">\r\n      <Form.Control\r\n        type=\"text\"\r\n        name=\"line2\"\r\n        placeholder=\"Address line 2\"\r\n        {...bindField(\"address2\")}\r\n      />\r\n    </Form.Group>\r\n\r\n    <Form.Group controlId=\"addressTown\">\r\n      <Form.Label className=\"h4\">Town:</Form.Label>\r\n      <Form.Control\r\n        type=\"text\"\r\n        name=\"town\"\r\n        placeholder=\"Address town\"\r\n        {...bindField(\"town\")}\r\n      />\r\n    </Form.Group>\r\n\r\n    <Form.Group controlId=\"addressCounty\">\r\n      <Form.Label className=\"h4\">County:</Form.Label>\r\n      <Form.Control\r\n        type=\"text\"\r\n        name=\"county\"\r\n        placeholder=\"Address town\"\r\n        {...bindField(\"county\")}\r\n      />\r\n    </Form.Group>\r\n\r\n    <Form.Group controlId=\"addressCounty\">\r\n      <Form.Label className=\"h4\">\r\n        Postcode:{\" \"}\r\n        <Button size=\"sm\" variant=\"secondary\" onClick={clearPostcode}>\r\n          Clear\r\n        </Button>\r\n      </Form.Label>\r\n      <Form.Control\r\n        type=\"text\"\r\n        name=\"county\"\r\n        placeholder=\"Address town\"\r\n        disabled\r\n        {...bindField(\"postcode\")}\r\n      />\r\n    </Form.Group>\r\n  </div>\r\n);\r\n","import Edit from \"./Edit\";\r\n\r\nexport default Edit;\r\n","import React, { useContext, useState } from \"react\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Badge from \"react-bootstrap/Badge\";\r\nimport { useFormState } from \"../hooks/form-state\";\r\nimport PostcodeLookup from \"./PostcodeLookup\";\r\nimport { AddressEdit } from \"./AddressEdit\";\r\nimport { getEmptyAddress } from \"../utils/getEmptyAddress\";\r\nimport { AddressContext } from \"../../stores/address\";\r\n\r\nconst useIsDuplicateEmail = (email, originalEmail) => {\r\n  const { addresses } = useContext(AddressContext);\r\n  return (\r\n    email !== originalEmail &&\r\n    Boolean(addresses.find((address) => address.email === email))\r\n  );\r\n};\r\n\r\nconst Edit = ({ address = getEmptyAddress(), storeAddress, onClose }) => {\r\n  const {\r\n    formState: editAddress,\r\n    setFormState: setEditAddress,\r\n    setField,\r\n    bindField,\r\n  } = useFormState(address);\r\n\r\n  const [show, setShow] = useState(true);\r\n  const isDuplicateEmail = useIsDuplicateEmail(\r\n    editAddress.email,\r\n    address.email\r\n  );\r\n\r\n  const hasPostcode = Boolean(editAddress.postcode);\r\n\r\n  // Poor man's validation\r\n  const canSave =\r\n    hasPostcode && editAddress.name && editAddress.email && !isDuplicateEmail;\r\n\r\n  return (\r\n    <Modal\r\n      show={show}\r\n      size=\"lg\"\r\n      onHide={() => setShow(false)}\r\n      onExited={onClose}\r\n    >\r\n      <Modal.Header closeButton>\r\n        <Modal.Title>\r\n          {address.email ? \"Edit Address\" : \"Add Address\"}\r\n        </Modal.Title>\r\n      </Modal.Header>\r\n      <Modal.Body>\r\n        <Form>\r\n          {/*\r\n          Set min height so the size is stable between postcode lookup\r\n          and editing the address\r\n        */}\r\n          <Row style={{ minHeight: \"26rem\" }}>\r\n            <Col>\r\n              <Form.Group controlId=\"addressName\">\r\n                <Form.Label className=\"h3\">Name:</Form.Label>\r\n                <Form.Control\r\n                  type=\"text\"\r\n                  name=\"name\"\r\n                  placeholder=\"Enter full name\"\r\n                  {...bindField(\"name\")}\r\n                />\r\n              </Form.Group>\r\n\r\n              <Form.Group controlId=\"addressEmail\">\r\n                <Form.Label className=\"h3\">Email:</Form.Label>\r\n                <Form.Control\r\n                  type=\"email\"\r\n                  name=\"email\"\r\n                  placeholder=\"Enter email\"\r\n                  {...bindField(\"email\")}\r\n                />\r\n                {isDuplicateEmail ? (\r\n                  <Badge variant=\"danger\">Duplicate email</Badge>\r\n                ) : null}\r\n              </Form.Group>\r\n\r\n              <Form.Group controlId=\"addressTel\">\r\n                <Form.Label className=\"h3\">Tel:</Form.Label>\r\n                <Form.Control\r\n                  type=\"text\"\r\n                  name=\"telephone\"\r\n                  placeholder=\"Enter telephone number\"\r\n                  {...bindField(\"tel\")}\r\n                />\r\n              </Form.Group>\r\n            </Col>\r\n            <Col>\r\n              {hasPostcode ? (\r\n                <AddressEdit\r\n                  bindField={bindField}\r\n                  clearPostcode={() => setField(\"postcode\", null)}\r\n                />\r\n              ) : (\r\n                <PostcodeLookup\r\n                  setPostcode={(postcodeDetails) =>\r\n                    setEditAddress({ ...editAddress, ...postcodeDetails })\r\n                  }\r\n                />\r\n              )}\r\n            </Col>\r\n          </Row>\r\n          <div className=\"text-right\" />\r\n        </Form>\r\n      </Modal.Body>\r\n      <Modal.Footer>\r\n        <Button disabled={!canSave} onClick={() => storeAddress(editAddress)}>\r\n          Save\r\n        </Button>\r\n      </Modal.Footer>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default Edit;\r\n","export const getEmptyAddress = () => ({\r\n  name: null,\r\n  email: null,\r\n  tel: null,\r\n  address1: null,\r\n  address2: null,\r\n  town: null,\r\n  county: null,\r\n  postcode: null,\r\n  longitude: null,\r\n  latitude: null\r\n});\r\n","import { useState } from \"react\";\r\n\r\nconst getEventValue = targetOrValue =>\r\n  targetOrValue.target && targetOrValue.target.value !== undefined\r\n    ? targetOrValue.target.value\r\n    : targetOrValue;\r\n\r\n/**\r\n * useFormState\r\n *\r\n * Normal useState with form helpers\r\n *\r\n * setField: Set one field (key) of the state object\r\n *\r\n * bindField: provides value and onChange for <input />s\r\n *\r\n */\r\nexport const useFormState = (initState = {}) => {\r\n  const [formState, setFormState] = useState(initState);\r\n\r\n  const setField = (field, value) =>\r\n    setFormState(formState => ({ ...formState, [field]: value }));\r\n\r\n  const bindField = field => ({\r\n    value: formState[field],\r\n    onChange: event => setField(field, getEventValue(event))\r\n  });\r\n\r\n  return { formState, setFormState, setField, bindField };\r\n};\r\n","import React, { createRef, useEffect } from \"react\";\r\n\r\n/**\r\n * ScrollInToView\r\n *\r\n * When active is set true scrolls the component in to view\r\n *\r\n * Used to scroll newly added addresses in to view in the side list\r\n */\r\nconst ScrollInToView = ({ active, children }) => {\r\n  const scrollElement = createRef();\r\n\r\n  useEffect(() => {\r\n    if (\r\n      !active ||\r\n      typeof scrollElement.current.scrollIntoViewIfNeeded !== \"function\"\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    scrollElement.current.scrollIntoViewIfNeeded();\r\n  }, [active]);\r\n\r\n  return <div ref={scrollElement}>{children}</div>;\r\n};\r\n\r\nexport default ScrollInToView;\r\n","import React from \"react\";\r\nimport ListGroup from \"react-bootstrap/ListGroup\";\r\nimport ScrollInToView from \"./components/ScrollInToView\";\r\n\r\n/**\r\n * List - presenter component\r\n *\r\n */\r\nconst List = ({ addresses, isSelected, onClick }) => (\r\n  <ListGroup\r\n    style={{\r\n      maxHeight: \"600px\",\r\n      overflowY: \"auto\",\r\n      borderTop: \"1px solid rgba(0, 0, 0, 0.125)\",\r\n      borderBottom: \"1px solid rgba(0, 0, 0, 0.125)\"\r\n    }}\r\n  >\r\n    {addresses.map(address => {\r\n      const isItemSelected = isSelected(address);\r\n      return (\r\n        <ListGroup.Item\r\n          key={address.email}\r\n          active={isItemSelected}\r\n          action={Boolean(onClick)}\r\n          onClick={() => onClick(address)}\r\n        >\r\n          <ScrollInToView active={isItemSelected}>\r\n            {address.name}\r\n          </ScrollInToView>\r\n        </ListGroup.Item>\r\n      );\r\n    })}\r\n  </ListGroup>\r\n);\r\n\r\nexport default List;\r\n","import React from \"react\";\r\nimport InputGroup from \"react-bootstrap/InputGroup\";\r\nimport FormControl from \"react-bootstrap/FormControl\";\r\nimport Octicon, { Search } from \"@githubprimer/octicons-react\";\r\n\r\n/**\r\n * Search Box - presenter component\r\n *\r\n */\r\n\r\nconst SearchBox = ({ value, onChange }) => (\r\n  <div>\r\n    <InputGroup className=\"my-3\">\r\n      <FormControl\r\n        type=\"search\"\r\n        placeholder=\"search\"\r\n        value={value}\r\n        onChange={onChange && (({ target }) => onChange(target.value))}\r\n      />\r\n      <InputGroup.Append>\r\n        <InputGroup.Text>\r\n          <Octicon icon={Search} />\r\n        </InputGroup.Text>\r\n      </InputGroup.Append>\r\n    </InputGroup>\r\n  </div>\r\n);\r\n\r\nexport default SearchBox;\r\n","import AddressBook from \"./AddressBook\";\r\n\r\nexport default AddressBook;\r\n","import React, { useContext, useState } from \"react\";\nimport Button from \"react-bootstrap/Button\";\nimport Col from \"react-bootstrap/Col\";\nimport Row from \"react-bootstrap/Row\";\nimport { AddressContext } from \"../stores/address\";\nimport Display from \"./Display\";\nimport Edit from \"./Edit\";\nimport List from \"./List\";\nimport SearchBox from \"./SearchBox\";\nimport { getEmptyAddress } from \"./utils/getEmptyAddress\";\n\nconst AddressBook = () => {\n  const { addresses, actions } = useContext(AddressContext);\n\n  // Component states\n  const [selected, setSelected] = useState(null);\n  const [search, setSearch] = useState(\"\");\n  const [editingAddress, setEditingAddress] = useState(null);\n\n  // sort the addresses by name\n  const sortedAddresses = addresses.slice().sort((a, b) => {\n    return a.name === b.name ? 0 : a.name > b.name ? 1 : -1;\n  });\n\n  // filter out those that do not match the search term\n  const filteredAddresses = sortedAddresses.filter(address =>\n    address.name.toLowerCase().includes(search.toLowerCase())\n  );\n\n  // Create actions for props\n  const removeAddress = address => {\n    actions.remove(address.email);\n\n    if (selected === address) {\n      setSelected(null);\n    }\n  };\n\n  const storeAddress = updateAddress => {\n    const existingEmail = editingAddress && editingAddress.email;\n\n    if (existingEmail) {\n      actions.update(existingEmail, updateAddress);\n    } else {\n      actions.add(updateAddress);\n    }\n\n    setEditingAddress(null);\n    setSelected(updateAddress);\n  };\n\n  return (\n    <div>\n      <Row className=\"m-4\">\n        <Col md={4} xs={8}>\n          <SearchBox\n            className={selected ? \"d-none d-md-block\" : \"\"}\n            value={search}\n            onChange={setSearch}\n          />\n        </Col>\n        <Col className=\"text-right\">\n          <Button\n            className=\"my-3\"\n            onClick={() => setEditingAddress(getEmptyAddress())}\n          >\n            Add Address\n          </Button>\n        </Col>\n      </Row>\n      <Row className=\"m-4\">\n        {/* Hide the address list on mobile when an address is selected */}\n        <Col md={4} className={selected ? \"d-none d-md-block\" : \"\"}>\n          <List\n            addresses={filteredAddresses}\n            isSelected={address => address === selected}\n            onClick={setSelected}\n          />\n        </Col>\n        <Col>\n          {/* Display the selected address */}\n          {selected ? (\n            <Display\n              address={selected}\n              clearSelection={() => setSelected(null)}\n              edit={setEditingAddress}\n              remove={removeAddress}\n            />\n          ) : (\n            <div className=\"d-none d-md-block\">\n              <p>Please select an address</p>\n            </div>\n          )}\n        </Col>\n      </Row>\n\n      {/*\n        Only show the edit model if the editingAddress is set.\n        The same modal is used for adding new addresses and editing\n        existing ones. The only difference is if editingAddress.email is set\n      */}\n      {editingAddress && (\n        <Edit\n          address={editingAddress}\n          onClose={() => setEditingAddress(null)}\n          storeAddress={storeAddress}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default AddressBook;\n","import React from \"react\";\nimport Container from \"react-bootstrap/Container\";\nimport AddressBook from \"./AddressBook\";\nimport { AddressProvider } from \"./stores/address\";\n\n/**\n * The base App is wraps everything in the AddressProvider and a\n * simple bootstrap container\n */\n\nconst App = () => (\n  <AddressProvider>\n    <Container>\n      <AddressBook />\n    </Container>\n  </AddressProvider>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./bootstrap.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}